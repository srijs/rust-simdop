var searchIndex = {};
searchIndex['example'] = {"items":[],"paths":[]};
searchIndex['simdop'] = {"items":[[0,"","simdop","# A Library for Safe SIMD Operations",null,null],[0,"core","","Core data structures and traits.",null,null],[3,"Twice","simdop::core","",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[8,"Half","","",null,null],[16,"Half","simdop::core::Half","",null,null],[8,"ElemTwice","simdop::core","",null,null],[16,"ElemTwice","simdop::core::ElemTwice","",null,null],[8,"Multi","simdop::core","",null,null],[16,"Elem","simdop::core::Multi","",null,null],[16,"Repr","","",null,null],[10,"wrap","simdop::core","",1,{"inputs":[{"name":"multi"},{"name":"repr"}],"output":{"name":"self"}}],[10,"unwrap","","",1,{"inputs":[{"name":"multi"}],"output":{"name":"repr"}}],[11,"clone","","",0,{"inputs":[{"name":"twice"}],"output":{"name":"twice"}}],[11,"fmt","","",0,{"inputs":[{"name":"twice"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Half","","",null,null],[6,"ElemTwice","","",null,null],[0,"arch","simdop","CPU identification and feature detection, as well as trait implementations.",null,null],[3,"X86","simdop::arch","",null,null],[0,"x86","","",null,null],[3,"SSE2","simdop::arch::x86","",null,null],[0,"sse2","","",null,null],[0,"i64x2","simdop::arch::x86::sse2","",null,null],[6,"Elem","simdop::arch::x86::sse2::i64x2","",null,null],[6,"Repr","","",null,null],[11,"set1","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"i64"}],"output":{"name":"m2"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m2"},{"name":"m2"}],"output":{"name":"m2"}}],[11,"shli","","",2,{"inputs":[{"name":"sse2"},{"name":"m2"},{"name":"i32"}],"output":{"name":"m2"}}],[11,"shri","","",2,{"inputs":[{"name":"sse2"},{"name":"m2"},{"name":"i32"}],"output":{"name":"m2"}}],[0,"i32x4","simdop::arch::x86::sse2","",null,null],[6,"Elem","simdop::arch::x86::sse2::i32x4","",null,null],[6,"Repr","","",null,null],[11,"set1","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"i32"}],"output":{"name":"m4"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"shli","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"i32"}],"output":{"name":"m4"}}],[11,"shri","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"i32"}],"output":{"name":"m4"}}],[0,"i16x8","simdop::arch::x86::sse2","",null,null],[6,"Elem","simdop::arch::x86::sse2::i16x8","",null,null],[6,"Repr","","",null,null],[11,"set1","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"i16"}],"output":{"name":"m8"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"shli","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"i32"}],"output":{"name":"m8"}}],[11,"shri","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"i32"}],"output":{"name":"m8"}}],[11,"detect","simdop::arch","",3,{"inputs":[{"name":"x86"}],"output":{"name":"option"}}],[11,"detect","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"x86"}],"output":{"name":"option"}}],[6,"M2","simdop","A vector of 2 elements of type `N`.",null,null],[6,"M4","","A vector of 4 elements of type `N`.",null,null],[6,"M8","","A vector of 8 elements of type `N`.",null,null],[6,"M16","","A vector of 16 elements of type `N`.",null,null],[6,"M32","","A vector of 32 elements of type `N`.",null,null],[8,"Set1","","The `Set1` trait is used to specify broadcasting functionality.",null,null],[10,"set1","","Broadcasts `e` to all elements of the vector.",4,{"inputs":[{"name":"set1"},{"name":"m"}],"output":{"name":"m"}}],[8,"Add","","The `Add` trait is used to specify element-wise addition functionality.",null,null],[10,"add","","Adds elements in a and b.",5,{"inputs":[{"name":"add"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Shli","","The `Shli` trait is used to specify immediate bit-wise left shift functionality.",null,null],[10,"shli","","Shifts all elements in the `m` left by `i` bits.",6,{"inputs":[{"name":"shli"},{"name":"m"},{"name":"i32"}],"output":{"name":"m"}}],[8,"Shri","","The `Shri` trait is used to specify immediate bit-wise right shift functionality.",null,null],[10,"shri","","Shifts all elements in the `m` right by `i` bits.",7,{"inputs":[{"name":"shri"},{"name":"m"},{"name":"i32"}],"output":{"name":"m"}}],[8,"Mullo","","The `Mullo` trait is used to specify low element-wise multiplication functionality.",null,null],[10,"mullo","","Multiplies the elements in `a` and `b` and stores the lower halves of the results.",8,{"inputs":[{"name":"mullo"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[11,"wrap","","",9,null],[11,"unwrap","","",9,null],[11,"wrap","","",10,null],[11,"unwrap","","",10,null],[11,"wrap","","",11,null],[11,"unwrap","","",11,null]],"paths":[[3,"Twice"],[8,"Multi"],[3,"SSE2"],[3,"X86"],[8,"Set1"],[8,"Add"],[8,"Shli"],[8,"Shri"],[8,"Mullo"],[6,"M2"],[6,"M4"],[6,"M8"]]};
initSearch(searchIndex);

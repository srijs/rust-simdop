var searchIndex = {};
searchIndex['example'] = {"items":[],"paths":[]};
searchIndex['simdop'] = {"items":[[0,"","simdop","# A Library for Safe SIMD Operations",null,null],[0,"core","","Core data structures and traits.",null,null],[3,"Twice","simdop::core","",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[8,"Multi","","",null,null],[16,"Elem","simdop::core::Multi","",null,null],[16,"Repr","","",null,null],[10,"wrap","simdop::core","",1,{"inputs":[{"name":"multi"},{"name":"repr"}],"output":{"name":"self"}}],[10,"unwrap","","",1,{"inputs":[{"name":"multi"}],"output":{"name":"repr"}}],[8,"Half","","",null,null],[16,"Half","simdop::core::Half","",null,null],[8,"Widen","simdop::core","",null,null],[16,"Widen","simdop::core::Widen","",null,null],[8,"Narrow","simdop::core","",null,null],[16,"Narrow","simdop::core::Narrow","",null,null],[11,"clone","simdop::core","",0,{"inputs":[{"name":"twice"}],"output":{"name":"twice"}}],[11,"fmt","","",0,{"inputs":[{"name":"twice"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Half","","",null,null],[6,"Widen","","",null,null],[6,"Widen","","",null,null],[6,"Widen","","",null,null],[6,"Narrow","","",null,null],[6,"Narrow","","",null,null],[6,"Narrow","","",null,null],[0,"arch","simdop","CPU identification and feature detection, as well as trait implementations.",null,null],[0,"x86","simdop::arch","",null,null],[3,"SSE2","simdop::arch::x86","",null,null],[3,"SSSE3","","",null,null],[0,"sse2","","",null,null],[0,"i64x2","simdop::arch::x86::sse2","",null,null],[11,"set1","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"i64"}],"output":{"name":"m2"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m2"},{"name":"m2"}],"output":{"name":"m2"}}],[11,"shli","","",2,{"inputs":[{"name":"sse2"},{"name":"m2"},{"name":"i32"}],"output":{"name":"m2"}}],[11,"shri","","",2,{"inputs":[{"name":"sse2"},{"name":"m2"},{"name":"i32"}],"output":{"name":"m2"}}],[0,"i32x4","simdop::arch::x86::sse2","",null,null],[11,"cmpeq","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"cmpgt","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"cmplt","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"set1","","",2,{"inputs":[{"name":"sse2"},{"name":"i32"}],"output":{"name":"m4"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"shli","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"i32"}],"output":{"name":"m4"}}],[11,"shri","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"i32"}],"output":{"name":"m4"}}],[11,"packs","","",2,{"inputs":[{"name":"sse2"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m8"}}],[0,"i16x8","simdop::arch::x86::sse2","",null,null],[11,"cmpeq","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"cmpgt","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"cmplt","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"set1","","",2,{"inputs":[{"name":"sse2"},{"name":"i16"}],"output":{"name":"m8"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"adds","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"madd","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m4"}}],[11,"min","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"max","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"shli","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"i32"}],"output":{"name":"m8"}}],[11,"shri","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"i32"}],"output":{"name":"m8"}}],[11,"mullo","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"mulhi","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"packs","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m16"}}],[11,"packus","","",2,{"inputs":[{"name":"sse2"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m16"}}],[0,"i8x16","simdop::arch::x86::sse2","",null,null],[11,"cmpeq","simdop::arch::x86","",2,{"inputs":[{"name":"sse2"},{"name":"m16"},{"name":"m16"}],"output":{"name":"m16"}}],[11,"cmpgt","","",2,{"inputs":[{"name":"sse2"},{"name":"m16"},{"name":"m16"}],"output":{"name":"m16"}}],[11,"cmplt","","",2,{"inputs":[{"name":"sse2"},{"name":"m16"},{"name":"m16"}],"output":{"name":"m16"}}],[11,"set1","","",2,{"inputs":[{"name":"sse2"},{"name":"i8"}],"output":{"name":"m16"}}],[11,"add","","",2,{"inputs":[{"name":"sse2"},{"name":"m16"},{"name":"m16"}],"output":{"name":"m16"}}],[11,"adds","","",2,{"inputs":[{"name":"sse2"},{"name":"m16"},{"name":"m16"}],"output":{"name":"m16"}}],[0,"ssse3","","",null,null],[0,"i8x16","simdop::arch::x86::ssse3","",null,null],[11,"abs","simdop::arch::x86","",3,{"inputs":[{"name":"ssse3"},{"name":"m16"}],"output":{"name":"m16"}}],[11,"sign","","",3,{"inputs":[{"name":"ssse3"},{"name":"m16"},{"name":"m16"}],"output":{"name":"m16"}}],[0,"i16x8","simdop::arch::x86::ssse3","",null,null],[11,"abs","simdop::arch::x86","",3,{"inputs":[{"name":"ssse3"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"hadd","","",3,{"inputs":[{"name":"ssse3"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"hsub","","",3,{"inputs":[{"name":"ssse3"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[11,"sign","","",3,{"inputs":[{"name":"ssse3"},{"name":"m8"},{"name":"m8"}],"output":{"name":"m8"}}],[0,"i32x4","simdop::arch::x86::ssse3","",null,null],[11,"abs","simdop::arch::x86","",3,{"inputs":[{"name":"ssse3"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"hadd","","",3,{"inputs":[{"name":"ssse3"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"hsub","","",3,{"inputs":[{"name":"ssse3"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"sign","","",3,{"inputs":[{"name":"ssse3"},{"name":"m4"},{"name":"m4"}],"output":{"name":"m4"}}],[11,"detect","","",2,{"inputs":[{"name":"sse2"}],"output":{"name":"option"}}],[11,"detect","","",3,{"inputs":[{"name":"ssse3"}],"output":{"name":"option"}}],[6,"M2","simdop","A vector of 2 elements of type `N`.",null,null],[6,"M4","","A vector of 4 elements of type `N`.",null,null],[6,"M8","","A vector of 8 elements of type `N`.",null,null],[6,"M16","","A vector of 16 elements of type `N`.",null,null],[6,"M32","","A vector of 32 elements of type `N`.",null,null],[8,"CmpEq","","The `CmpEq` trait is used to specify equality comparison funtionality.",null,null],[10,"cmpeq","","Compares elements in `a` and `b` for equality.",4,{"inputs":[{"name":"cmpeq"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"CmpGt","","The `CmpGt` trait is used to specify greater-than comparison funtionality.",null,null],[10,"cmpgt","","Compares elements in `a` and `b` for greater-than.",5,{"inputs":[{"name":"cmpgt"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"CmpLt","","The `CmpLt` trait is used to specify less-than comparison funtionality.",null,null],[10,"cmplt","","Compares elements in `a` and `b` for less-than.",6,{"inputs":[{"name":"cmplt"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Set1","","The `Set1` trait is used to specify broadcasting functionality.",null,null],[10,"set1","","Broadcasts `e` to all elements of the vector.",7,{"inputs":[{"name":"set1"},{"name":"m"}],"output":{"name":"m"}}],[8,"Add","","The `Add` trait is used to specify element-wise addition functionality.",null,null],[10,"add","","Adds elements in a and b.",8,{"inputs":[{"name":"add"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"AddS","","The `AddS` trait is used to specify element-wise saturated addition functionality.",null,null],[10,"adds","","Adds elements in a and b using saturation.",9,{"inputs":[{"name":"adds"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"MAdd","","The `MAdd` trait is used to specify multiply-add functionality.",null,null],[10,"madd","","Multiplies elements from `a` and `b`, producing intermediate elements of twice the size. Horizontally adds adjacent pairs of intermediate elements.",10,{"inputs":[{"name":"madd"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Min","","The `Min` trait is used to specify minimum comparison functionality.",null,null],[10,"min","","Compares elements in `a` and `b`, and finds the minimum values.",11,{"inputs":[{"name":"min"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Max","","The `Max` trait is used to specify maximum comparison functionality.",null,null],[10,"max","","Compares elements in `a` and `b`, and finds the maximum values.",12,{"inputs":[{"name":"max"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Shli","","The `Shli` trait is used to specify immediate bit-wise left shift functionality.",null,null],[10,"shli","","Shifts all elements in the `a` left by `i` bits.",13,{"inputs":[{"name":"shli"},{"name":"m"},{"name":"i32"}],"output":{"name":"m"}}],[8,"Shri","","The `Shri` trait is used to specify immediate bit-wise right shift functionality.",null,null],[10,"shri","","Shifts all elements in the `a` right by `i` bits.",14,{"inputs":[{"name":"shri"},{"name":"m"},{"name":"i32"}],"output":{"name":"m"}}],[8,"Mullo","","The `Mullo` trait is used to specify low element-wise multiplication functionality.",null,null],[10,"mullo","","Multiplies the elements in `a` and `b` and stores the lower halves of the results.",15,{"inputs":[{"name":"mullo"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Mulhi","","The `Mulhi` trait is used to specify high element-wise multiplication functionality.",null,null],[10,"mulhi","","Multiplies the elements in `a` and `b` and stores the higher halves of the results.",16,{"inputs":[{"name":"mulhi"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Abs","","The `Abs` trait is used to specify absolute value computation functionality.",null,null],[10,"abs","","Computes the absolute value of the elements in `a`",17,{"inputs":[{"name":"abs"},{"name":"m"}],"output":{"name":"m"}}],[8,"HAdd","","The `HAdd` trait is used to specify horizontal addition functionality.",null,null],[10,"hadd","","Horizontally adds adjacent pairs of elements in `a` and `b`.",18,{"inputs":[{"name":"hadd"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"HSub","","The `HSub` trait is used to specify horizontal subtraction functionality.",null,null],[10,"hsub","","Horizontally subtracts adjacent pairs of elements in `a` and `b`.",19,{"inputs":[{"name":"hsub"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"Sign","","The `Sign` trait is used to specify negation functionality.",null,null],[10,"sign","","Negates elements in `a` if the corresponding element in `b` is negative.\nZeroes out the element if the corresponding element in `b` is zero.",20,{"inputs":[{"name":"sign"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"PackS","","The `PackS` trait is used to specify signed element narrowing functionality.",null,null],[10,"packs","","Narrows elements from `a` and `b` using signed saturation.",21,{"inputs":[{"name":"packs"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[8,"PackUS","","The `PackUS` trait is used to specify unsigned element narrowing functionality.",null,null],[10,"packus","","Narrows elements from `a` and `b` using unsigned saturation.",22,{"inputs":[{"name":"packus"},{"name":"m"},{"name":"m"}],"output":{"name":"m"}}],[6,"Elem","","",null,null],[6,"Repr","","",null,null],[11,"wrap","","",23,{"inputs":[{"name":"m2"},{"name":"repr"}],"output":{"name":"self"}}],[11,"unwrap","","",23,{"inputs":[{"name":"m2"}],"output":{"name":"repr"}}],[6,"Elem","","",null,null],[6,"Repr","","",null,null],[11,"wrap","","",24,{"inputs":[{"name":"m4"},{"name":"repr"}],"output":{"name":"self"}}],[11,"unwrap","","",24,{"inputs":[{"name":"m4"}],"output":{"name":"repr"}}],[6,"Elem","","",null,null],[6,"Repr","","",null,null],[11,"wrap","","",25,{"inputs":[{"name":"m8"},{"name":"repr"}],"output":{"name":"self"}}],[11,"unwrap","","",25,{"inputs":[{"name":"m8"}],"output":{"name":"repr"}}],[6,"Elem","","",null,null],[6,"Repr","","",null,null],[11,"wrap","","",26,{"inputs":[{"name":"m16"},{"name":"repr"}],"output":{"name":"self"}}],[11,"unwrap","","",26,{"inputs":[{"name":"m16"}],"output":{"name":"repr"}}]],"paths":[[3,"Twice"],[8,"Multi"],[3,"SSE2"],[3,"SSSE3"],[8,"CmpEq"],[8,"CmpGt"],[8,"CmpLt"],[8,"Set1"],[8,"Add"],[8,"AddS"],[8,"MAdd"],[8,"Min"],[8,"Max"],[8,"Shli"],[8,"Shri"],[8,"Mullo"],[8,"Mulhi"],[8,"Abs"],[8,"HAdd"],[8,"HSub"],[8,"Sign"],[8,"PackS"],[8,"PackUS"],[6,"M2"],[6,"M4"],[6,"M8"],[6,"M16"]]};
initSearch(searchIndex);
